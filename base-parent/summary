springcloud各组件
1.Eurek:
         提供微服务的发现和注册功能
         包含Eureka server 和 Eureka client 2个组件
		 Eureka server: 1).提供服务发现的能力，各个微服务在启动的时候，会向Eureka注册自己的信息，Eureka会保存这些信息；
		                2).如果在90s内没有接受到某服务的续约信息，就会注销该微服务，另当Eureka server进入自我保护模式时，及时未接受到client 的心跳续约（由于网络故障引起的无法续约），也不会注销服务信息
						3).在高可用条件下，每个Eureka server 也是 Eureka client,他们之间通过复制的方式来同步注册信息
		 Eureka client: 1).微服务，相对Eureka server 的一个客户端，启动时会将自己的信息注册到Eureka server中
		                2).每个30m向Eureka server发送心跳
					    3).缓存注册表中的信息，不需要每次都查询Eureka server，当Eureka server 宕机也不会影响服务之间的调用
2.Ribbon:
         提供各微服务集群的负载均衡功能
		 默认负载算法很多种，包括：轮询，随机 默认ZoneAvoidanceRule
3.Feign:
         提供各服务之间调用的一种方式，整合了Ribbon 和 Eureka

4.Hystrix:
         提供微服务的容错机制
		 容错机制：局部出了错也可以解决，而不是整由其扩展，导致整个项目出错
		           1).为网络设置延迟，已释放线程或者进程占用的系统资源
		           2).使用断路器模式：对于失败的请求，如果失败次数达到了一定的阈值，断路器打开，给他快速返回异常结果，不让它占用资源
				                     具备自我修复功能，就是说原来失败的请求接口已经修复好了，断路器要自我关闭，返回接口正确的结果


		Hystrix是一个开源的延迟和容错库
        实现方式
		1).包裹请求：使用HystrixCommand,让每个命令在独立线程中执行。
		2).跳闸机制：当请求某服务的错误率超过了一定的阈值时，就不会再请求该服务了，知道该服务恢复。
		3).监控：可以近乎实时的监控每个接口的健康状况，例如成功，失败，超时等等
		4).回退机制：当请求不正常时，可以执行回退逻辑。
		5).自我修复：断路器打开后，根据服务的状况，会进入不同的状态，打开，关闭，半开
5.Zuul:
      减少客户端与微服务之间的交互：让客户端之间和Zuul交互，Zuul封装了应用程序的内部结构
	  具有监控认证的功能
	  Zuul核心 过滤器4种
	  pre: 请求被路由之前调用，身份验证，选择请求的微服务
	  routing: 将请求路由到微服务
	  post；路由到微服务以后执行
	  error: 在发生错误时执行